document.addEventListener("DOMContentLoaded", () => {
  const form = document.querySelector(".form");
  const formPhone = document.querySelector(".form-phone");
  const regExpName = /^[a-zA-Z0-9_-]{3,16}$/;
  const regExpEmail = /^[A-Z0-9._%+-]+@[A-Z0-9-]+.+.[A-Z]{2,4}$/i;
  const regExpPass = /^[a-zA-Z0-9]{8,16}$/;
  const regExpPhone = /^\+?(\d{1,3})?[- .]?\(?(?:\d{2,3})\)?[- .]?\d\d\d[- .]?\d\d\d\d$/;
  const fromGroup = [];
  const arrPass = [];

  [...document.querySelectorAll(".from-group")].map(elem => {
    fromGroup.push({
      a: elem.querySelector(".form-input"),
      b: elem.querySelector(".from-strip"),
      c: elem.querySelector(".form-label"),
      d: elem.querySelector(".from-errors"),
      e: false
    });
  });

  const arrCheck = {
    a: document.querySelector(".form-check"),
    b: document.querySelector(".from-errors-check")
  };
  const arrFile = {
    a: document.getElementById("formFile"),
    b: document.querySelector(".from-errors-file"),
    c: document.querySelector(".form-file-button"),
    d: document.querySelector(".form-preview")
  };

  const modal = {
    a: document.querySelector(".modal-win"),
    b: document.querySelector(".modal-message")
  };

  (() => {
    const array = [];
    [...form.querySelectorAll(".formPass")].map(elem => {
      array.push(elem.offsetParent);
    });
    array.map(elem => {
      arrPass.push({
        a: elem.querySelector(".formPass"),
        b: elem.querySelector(".from-view")
      });
    });
  })();

  formPhone.addEventListener("input", phone);
  formPhone.addEventListener("focus", phone);
  formPhone.addEventListener("blur", phone);
  formPhone.addEventListener("keydown", phone);

  form.addEventListener("submit", formSend);

  fromGroup.forEach(elem => {
    elem.a.addEventListener("blur", () => {
      validateElem(elem);
    });
    elem.a.addEventListener("focus", () => {
      helpElem(elem);
    });
  });

  arrFile.c.addEventListener("click", event => {
    event.preventDefault();
    arrFile.a.click();
  });

  arrFile.a.addEventListener("change", () => {
    uploadFile(arrFile.a.files[0]);
  });

  arrPass.forEach(elem => {
    elem.b.addEventListener("click", () => {
      showElem(elem);
    });
  });

  function validateElem(elem) {
    const dictionary = {
      username: [
        regExpName.test(elem.a.value),
        "Введите корректное имя пользователя"
      ],
      email: [regExpEmail.test(elem.a.value), "Введите корректный Email"],
      password: [regExpPass.test(elem.a.value), "Введите корректный пароль"],
      passwordConfirmation: [
        fromGroup[2].a.value === elem.a.value && regExpPass.test(elem.a.value),
        "Пароль не совпадает"
      ],
      phone: [regExpPhone.test(elem.a.value), "Введите корректный телефон"],
      default: "default"
    };
    return (() => {
      let name = dictionary[elem.a.name] || dictionary["default"];
      if (name === "default") {
        return;
      }
      if (!name[0] && elem.a.value !== "") {
        messageElem(elem.d, name[1]);
        stripActive(elem.b, "accent");
        elem.e = false;
      } else if (name[0] && elem.a.value !== "") {
        stripActive(elem.b, "valid");
        elem.e = true;
      } else {
        stripActive(elem.b, "white");
        elem.a.setAttribute("placeholder", "");
        elem.e = false;
      }
    })();
  }

  function helpElem(elem) {
    const dictionary = {
      username: [regExpName, "Должно быть 3 - 16 символов"],
      password: [regExpPass, "Должно быть 8 - 16 символов"],
      passwordConfirmation: [regExpPass, "Повторите пароль"],
      default: "default"
    };
    return (() => {
      let name = dictionary[elem.a.name] || dictionary["default"];
      if (name === "default") {
        return;
      }
      if (!name[0].test(elem.a.value)) {
        elem.a.setAttribute("placeholder", name[1]);
      }
    })();
  }

  function phone(event) {
    let keyCode = event.key;
    const matrix = "+7 (___) ___ ____";
    const def = matrix.replace(/\D/g, "");
    const val = this.value.replace(/\D/g, "");
    let i = 0;
    let new_value = matrix.replace(/[_\d]/g, a => {
      return i < val.length ? val.charAt(i++) || def.charAt(i) : a;
    });

    i = new_value.indexOf("_");
    if (i !== -1) {
      i < 5 && (i = 3);
      new_value = new_value.slice(0, i);
    }

    let reg = matrix
      .substr(0, this.value.length)
      .replace(/_+/g, a => {
        return "\\d{1," + a.length + "}";
      })
      .replace(/[+()]/g, "\\$&");

    reg = new RegExp("^" + reg + "$");

    if (
      !reg.test(this.value) ||
      this.value.length < 5 ||
      (keyCode >= 0 && keyCode <= 9)
    ) {
      this.value = new_value;
    }
    if (event.type === "blur" && this.value.length < 5) {
      this.value = "";
    }
  }

  function showElem(elem) {
    if (elem.a.type === "password") {
      elem.a.focus();
      elem.a.setAttribute("type", "text");
      elem.b.classList.add("from-view-active");
    } else {
      elem.a.focus();
      elem.a.setAttribute("type", "password");
      elem.b.classList.remove("from-view-active");
    }
  }

  function formSend(event) {
    event.preventDefault();
    let checkOne = 0;
    let checkTwo = 0;
    fromGroup.forEach(elem => {
      if (!elem.a.value) {
        elem.a.setAttribute("placeholder", "Заполните поле!");
        elem.c.classList.add("form-label-focus");
        checkOne++;
      }
    });
    if (!arrCheck.a.checked) {
      arrCheck.b.textContent = "Заполните поле!";
    } else {
      arrCheck.b.textContent = "";
    }
    try {
      fromGroup.forEach(function(elem) {
        if (!elem.e && elem.a.value) {
          throw {
            elem: elem.d,
            notice: elem.d.innerHTML
          };
        }
        if (elem.e && elem.a.value) {
          checkTwo++;
        }
      });
    } catch ({ elem, notice }) {
      messageElem(elem, notice);
    }
    if (checkOne === 0 && checkTwo === fromGroup.length && arrCheck.a.checked) {
      modalMessage("Форма отправлена на регистрацию");
      // ___ Your submit form code ___
    }
  }

  function modalMessage(notice) {
    modal.b.textContent = notice;
    modal.a.classList.add("modal-win-active");
    setTimeout(() => {
      modal.a.classList.remove("modal-win-active");
    }, 2000);
  }

  function messageElem(elem, notice) {
    elem.textContent = notice;
    elem.classList.add("errors-active");
    setTimeout(() => {
      elem.classList.remove("errors-active");
    }, 2000);
  }

  function stripActive(elem, color) {
    const colorStrip = {
      accent: () => {
        elem.classList.add("strip-accent");
        elem.classList.remove("strip-valid");
      },
      valid: () => {
        elem.classList.add("strip-valid");
        elem.classList.remove("strip-accent");
      },
      white: () => {
        elem.classList.remove("strip-valid");
        elem.classList.remove("strip-accent");
      }
    };
    return colorStrip[color]();
  }

  function uploadFile(file) {
    if (!["image/jpeg", "image/png", "image/gif"].includes(file.type)) {
      modalMessage("Разрешены только изображения");
      arrFile.a.value = "";
      return;
    }
    if (file.size > 1050000) {
      modalMessage("Фаил должен быть неболее 1МБ");
      return;
    }
    let reader = new FileReader();
    reader.onload = e => {
      arrFile.d.innerHTML = `<img src="${e.target.result}" alt="Фото">`;
    };
    reader.onerror = () => {
      modalMessage("Ошибка");
    };
    reader.readAsDataURL(file);
  }
});
